服务端开发步骤：
  创建ServerSocketChannel,配置为非阻塞
  绑定监听，配置TCP参数
  创建独立IO线程，轮寻多路复用器
  创建Selector，将ServerSocketChannel注册到Selector，监听SelectionKey.ACCEPT
  启动IO线程，循环体执行Selector.select()方法，轮寻就绪的Channel
  轮寻到就绪的Channel，对其判断，如果是OP_ACCEPT，则为新客户端接入，使用ServerSocketChannel.accept接受
  设置新接入的客户端链路SocketChannel为非阻塞，配置TCP参数
  将SocketChannel注册到Selector，监听OP_READ操作位
  轮寻的Channel为OP_READ，说明SocketChannel中有新就绪的数据包需要读取，构造ByteBuffer对象，读取数据包
  轮寻Channel为OP_WRITE，说明还有数据包没有发送，需继续发送

优点：
  客户端发起连接是异步的，没有可读写道数据不会同步等待，直接返回
  SocketChannel读写都是异步的
  线程模型优化，JDKSelector在Linux通过epoll实现，没有连接句柄限制

allocate(int capacity) 	从堆空间中分配一个容量大小为capacity的byte数组作为缓冲区的byte数据存储器
allocateDirect(int capacity) 	是不使用JVM堆栈而是通过操作系统来创建内存块用作缓冲区，它与当前操作系统能够更好的耦合，因此能进一步提高I/O操作速度。但是分配直接缓冲区的系统开销很大，因此只有在缓冲区较大并长期存在，或者需要经常重用时，才使用这种缓冲区
wrap(byte[] array) 	这个缓冲区的数据会存放在byte数组中，bytes数组或buff缓冲区任何一方中数据的改动都会影响另一方。其实ByteBuffer底层本来就有一个bytes数组负责来保存buffer缓冲区中的数据，通过allocate方法系统会帮你构造一个byte数组
wrap(byte[] array,
int offset, int length)

在上一个方法的基础上可以指定偏移量和长度，这个offset也就是包装后byteBuffer的position，而length呢就是limit-position的大小，从而我们可以得到limit的位置为length+position(offset)

  ByteBuffer buffer=ByteBuffer.allocate(88);
  String value="xxx";
  buffer.put(value.getBytes());
  buffer.flip();
  byte[] vArray =new byte[buffer.remaining()];
  buffer.get(vArray);
  String decodeValue=new String(vArray);