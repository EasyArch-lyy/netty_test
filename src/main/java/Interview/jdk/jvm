java虚拟机结束生命周期：{
  执行System.exit();
  程序执行结束
  执行遇到异常或错误
  操作系统出错java终止
}
{
 加载：查找加载类的二进制数据{
  类加载器{
     根类加载器（Bootstrap）
     扩展类加载器(Extension)
     系统类加载器(System)
  }
  加载方式{
    本地系统直接加载
    网络下载.class
    zip,jar归档文件加载.class文件
    从专有数据库中提取.class文件
    将java源文件动态编译为.class文件（动态代理、jsp页面--被编译为----->servlet（java .class））
  }
   --双亲委派机制：
    自定义loader想要加载某类，向上寻找检查父类加载器是否被加载到，-->系统类加载器-->扩展类加载器-->根类加载器，自顶向下加载类
 }
 连接：
   -验证：确保被加载的类正确性

   -准备：为类的静态变量分配内存，将其初始化默认值
为类变量分配内存，设置默认值，到达默认值之前，类变量没有郑州初始化为初始值
   -解析：把类中的符号引用转换为直接引用
在类型的常量池中哦你发寻找类，接口，字段和方法的符号引用，把符号引用换为直接引用
 初始化：为类的静态变量赋予正确的初始值
  --类实例化：
为新对象分配内存、为实例赋默认值、为变量赋正确的初始值
 使用
 卸载
}
java程序对类的使用方式：主动使用、被动使用（不会导致类初始化）{
--主动使用：
   创建类的实例
   访问某个类或接口的静态变量(getstatic)，或对该静态变量赋值(putstatic)
   反射
   初始化类的子类
   java虚拟机启动时被标明启动类的类（包含main方法的类）
   jdk1.7开始提供动态语言支持
（java虚拟接实现在每个类或接口被java首次主动使用才初始化）   
}


